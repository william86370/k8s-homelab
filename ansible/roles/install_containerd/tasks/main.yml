---
- name: Check if containerd is installed
  command: which containerd
  register: containerd_installed
  ignore_errors: true

- name: Check if containerd service is running
  systemd:
    name: containerd
    state: started
  register: containerd_service
  ignore_errors: true
  when: containerd_installed.rc == 0

- name: Debug containerd installation status
  debug:
    msg: "Containerd is already installed and running."
  when: containerd_installed.rc == 0 and containerd_service.status.ActiveState == 'active'

- name: End play if containerd is installed and running
  meta: end_play
  when: containerd_installed.rc == 0 and containerd_service.status.ActiveState == 'active'

- name: Fetch the latest containerd version if required
  uri:
    url: "https://api.github.com/repos/containerd/containerd/releases/latest"
    return_content: yes
  register: containerd_release
  when: containerd_version == "latest"

- name: Set containerd version
  set_fact:
    containerd_version: "{{ containerd_release.json.tag_name }}"
  when: containerd_version == "latest"

- name: Fetch the latest nerdctl version if required
  uri:
    url: "https://api.github.com/repos/containerd/nerdctl/releases/latest"
    return_content: yes
  register: nerdctl_release
  when: nerdctl_version == "latest"

- name: Set nerdctl version
  set_fact:
    nerdctl_version: "{{ nerdctl_release.json.tag_name }}"
  when: nerdctl_version == "latest"

- name: Fetch the latest runc version if required
  uri:
    url: "https://api.github.com/repos/opencontainers/runc/releases/latest"
    return_content: yes
  register: runc_release
  when: runc_version == "latest"

- name: Set runc version
  set_fact:
    runc_version: "{{ runc_release.json.tag_name }}"
  when: runc_version == "latest"

- name: Fetch the latest CNI version if required
  uri:
    url: "https://api.github.com/repos/containernetworking/plugins/releases/latest"
    return_content: yes
  register: cni_release
  when: cni_version == "latest"

- name: Set CNI version
  set_fact:
    cni_version: "{{ cni_release.json.tag_name }}"
  when: cni_version == "latest"

- name: Fetch the latest crictl version if required
  uri:
    url: "https://api.github.com/repos/kubernetes-sigs/cri-tools/releases/latest"
    return_content: yes
  register: crictl_release
  when: crictl_version == "latest"

- name: Set crictl version
  set_fact:
    crictl_version: "{{ crictl_release.json.tag_name }}"
  when: crictl_version == "latest"

- name: Update apt and install dependencies
  apt:
    name:
      - ca-certificates
      - curl
    state: present
    update_cache: yes

- name: Set architecture-specific variables
  set_fact:
    architecture: "{{ 'arm64' if ansible_architecture == 'aarch64' else 'amd64' }}"

- name: Define runc, containerd, nerdctl, CNI, and crictl tarball filenames
  set_fact:
    runc_binary: "runc.{{ architecture }}"
    containerd_tarball: "containerd-{{ containerd_version | regex_replace('^v', '') }}-linux-{{ architecture }}.tar.gz"
    nerdctl_tarball: "nerdctl-{{ nerdctl_version | regex_replace('^v', '') }}-linux-{{ architecture }}.tar.gz"
    cni_tarball: "cni-plugins-linux-{{ architecture }}-{{ cni_version }}.tgz"
    crictl_tarball: "crictl-{{ crictl_version }}-linux-{{ architecture }}.tar.gz"

- name: Install runc
  get_url:
    url: "https://github.com/opencontainers/runc/releases/download/{{ runc_version }}/{{ runc_binary }}"
    dest: /usr/local/sbin/runc
    mode: '0755'

- name: Stop containerd if it is already installed
  service:
    name: containerd
    state: stopped
  when: ansible_facts.packages['containerd'] is defined

- name: Stop containerd service
  systemd:
    name: containerd
    state: stopped

- name: Install containerd
  get_url:
    url: "https://github.com/containerd/containerd/releases/download/{{ containerd_version }}/{{ containerd_tarball }}"
    dest: /usr/local/containerd.tar.gz

- name: Extract containerd
  unarchive:
    src: /usr/local/containerd.tar.gz
    dest: /usr/local
    remote_src: yes

- name: Cleanup containerd tarball
  file:
    path: /usr/local/containerd.tar.gz
    state: absent

- name: Install containerd systemd service
  get_url:
    url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
    dest: /etc/systemd/system/containerd.service

- name: Reload systemd daemon
  command: systemctl daemon-reload

- name: Enable containerd service
  systemd:
    name: containerd
    enabled: yes

- name: Install nerdctl
  get_url:
    url: "https://github.com/containerd/nerdctl/releases/download/{{ nerdctl_version }}/{{ nerdctl_tarball }}"
    dest: /usr/local/nerdctl.tar.gz

- name: Extract nerdctl
  unarchive:
    src: /usr/local/nerdctl.tar.gz
    dest: /usr/local/bin
    remote_src: yes

- name: Cleanup nerdctl tarball
  file:
    path: /usr/local/nerdctl.tar.gz
    state: absent

- name: Create containerd config directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate containerd default configuration
  command: containerd config default
  register: containerd_config
  changed_when: false

- name: Write containerd config to file
  copy:
    dest: /etc/containerd/config.toml
    content: "{{ containerd_config.stdout }}"

- name: Configure containerd to use systemd as the cgroup driver
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'

- name: Create CNI plugins directory
  file:
    path: /opt/cni/bin/
    state: directory

- name: Install CNI plugins
  get_url:
    url: "https://github.com/containernetworking/plugins/releases/download/{{ cni_version }}/{{ cni_tarball }}"
    dest: /opt/cni/bin/cni-plugins.tgz

- name: Extract CNI plugins
  unarchive:
    src: /opt/cni/bin/cni-plugins.tgz
    dest: /opt/cni/bin
    remote_src: yes

- name: Cleanup CNI plugins tarball
  file:
    path: /opt/cni/bin/cni-plugins.tgz
    state: absent

- name: Ensure CNI plugins are owned by root
  file:
    path: /opt/cni/bin
    owner: root
    group: root
    recurse: yes

- name: Install crictl
  get_url:
    url: "https://github.com/kubernetes-sigs/cri-tools/releases/download/{{ crictl_version }}/{{ crictl_tarball }}"
    dest: /usr/local/crictl.tar.gz

- name: Extract crictl
  unarchive:
    src: /usr/local/crictl.tar.gz
    dest: /usr/local/bin
    remote_src: yes

- name: Cleanup crictl tarball
  file:
    path: /usr/local/crictl.tar.gz
    state: absent

- name: Start containerd service
  systemd:
    name: containerd
    state: started
